import groovy.time.TimeCategory
import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    id 'com.diffplug.spotless'
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

tasks.withType(JavaCompile).configureEach {
    // Configure string concat to always inline compile
    options.compilerArgs.add '-XDstringConcat=inline'
}

tasks.withType(Test).configureEach { testTask ->

    // Allow adding a JVM arg when running tests via a Gradle Property named 'gearHeads.testJvmArg'.
    // In .github/workflows/gradle.yml this is used to specify where to put JVM crash logs.
    if (project.hasProperty('gearHeads.testJvmArg')) {
        jvmArgs project.properties['gearHeads.testJvmArg']
    }

    // Display test results as tests run, and a summary at the end.
    // See https://stackoverflow.com/a/36130467/95725
    testLogging {
        // Set options for log level LIFECYCLE
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true
        events = [TestLogEvent.FAILED, TestLogEvent.SKIPPED]

        // Set options for log level DEBUG and INFO
        debug {
            events = [TestLogEvent.STARTED,
                      TestLogEvent.FAILED,
                      TestLogEvent.PASSED,
                      TestLogEvent.SKIPPED,
                      TestLogEvent.STANDARD_ERROR,
                      TestLogEvent.STANDARD_OUT]
            exceptionFormat TestExceptionFormat.FULL
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat
    }

    afterSuite { TestDescriptor desc, TestResult result ->
        if (!desc.parent) {  // will match the outermost suite
            def output = "${testTask.project.name}:${testTask.name} results: ${result.resultType} " +
                    "(${result.testCount} tests, " +
                    "${result.successfulTestCount} passed, " +
                    "${result.failedTestCount} failed, " +
                    "${result.skippedTestCount} skipped) " +
                    "in ${TimeCategory.minus(new Date(result.endTime), new Date(result.startTime))}"
            def startItem = '│ ', endItem = ' │'
            def repeatLength = startItem.length() + output.length() + endItem.length() - 2
            println('\n┌' + ('─' * repeatLength) + '┐')
            println(startItem + output + endItem)
            println('└' + ('─' * repeatLength) + '┘\n')
        }
    }
}

tasks.named('jar') {
    manifest {
        attributes(
                'Implementation-Title': project.name,
                'Implementation-Version': project.version,
        )
    }
}

spotless {
    // See https://github.com/diffplug/spotless/tree/main/plugin-gradle
    format 'misc', {
        // define the files to apply `misc` to
        target '.gitattributes', '.gitignore'

        // define the steps to apply to those files
        trimTrailingWhitespace()
        indentWithSpaces()
        endWithNewline()
    }
    groovyGradle {
        greclipse().configFile('../greclipse-gradle.properties')
    }
    java {
        importOrder() // Use the default importOrder configuration (can override)
        removeUnusedImports()

        // Use Google Java Format
        // - aosp() causes it to use a four-space indent
        googleJavaFormat('1.24.0').reflowLongStrings()

        formatAnnotations()  // fix formatting of type annotations
    }
}
