/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.3/userguide/building_java_projects.html
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
	id "edu.wpi.first.GradleRIO" version "2023.4.3"
	id 'maven-publish'
}

tasks.withType(JavaCompile) {
    // Configure string concat to always inline compile
    options.compilerArgs.add '-XDstringConcat=inline'
}

def getArtifactVersion = { ->
	def output = new ByteArrayOutputStream();
	// excecute git rev-parse --abbref-ref HEAD
	// (gets branch name)
	exec {
		commandLine "git", "rev-parse", "--abbrev-ref", "HEAD"
		standardOutput = output
	}
	def branch = output.toString().trim()

	if (branch == "main") {
		output = new ByteArrayOutputStream();
		exec {
			commandLine "git" "describe" "--abbrev=0", "--tags"
			standardOutput = output
		}
		return output.toString().trim()
	} else {
		output = new ByteArrayOutputStream();
		exec {
			commandLine "git", "rev-parse", "--short", "HEAD"
			standardOutput = output
		}
		def hash = output.toString().trim()
		return hash + "-" + branch
	}
}
version = getArtifactVersion()

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
	maven {
		// WPI
		url "https://frcmaven.wpi.edu/artifactory/release/"
	}
}

dependencies {
    implementation wpi.java.deps.wpilib()
    api wpi.java.vendor.java()

    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
    simulationDebug wpi.sim.enableDebug()

    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
    simulationRelease wpi.sim.enableRelease()

	implementation 'edu.wpi.first.wpilibNewCommands:wpilibNewCommands-java:2023.4.3'

    testImplementation 'junit:junit:4.13'
}

// the magic line that makes tests work :)
wpi.java.configureTestTasks(test)

tasks.named('test') {
    // Use JUnit 4 for unit tests.
    useJUnit()
}

tasks.named('jar') {
    manifest {
        attributes('Implementation-Title': project.name,
                   'Implementation-Version': project.version)
    }
}

task sourceJar(type: Jar) {
	from sourceSets.main.allJava
	archiveClassifier = "sources"
}

publishing {
	publications {
		lib2813(MavenPublication) {
			groupId = "com.team2813.lib2813"
			artifactId = "2813Lib"
			from components.java
			artifact sourceJar
			pom {
				name = "2813 Library"
				description = "Frequently reused code written by team 2813"
				developers {
					developer {
						id = "mango"
						name = "kyle"
						email = "mangoiscute95@gmail.com"
					}
				}
				organization {
					name = "2813 Gear Heads"
					url = "https://team2813.com"
				}
			}
		}
	}
}