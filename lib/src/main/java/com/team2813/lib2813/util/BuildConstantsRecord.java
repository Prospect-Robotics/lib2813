package com.team2813.lib2813.util;

import edu.wpi.first.wpilibj.DriverStation;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.Optional;

/**
 * Record implementation of {@link BuildConstants}.
 *
 * <p>This class holds metadata about the build, such as git branch, commit hash, build time, etc.
 * It is typically generated at build time using the gversion Gradle plugin and then extracted at
 * runtime for diagnostics, publishing, or logging.
 *
 * <p>All values are immutable once created. Utility methods are provided for formatting dates
 * consistently and safely handling extraction errors.
 *
 * @author Team 2813
 */
record BuildConstantsRecord(
    String mavenName,
    int gitRevision,
    String gitSha,
    String gitBranch,
    ZonedDateTime gitSubmitTime,
    ZonedDateTime buildTime,
    long buildTimeMillis,
    int dirty)
    implements BuildConstants {
  private static final DateTimeFormatter DATE_FORMATTER =
      DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss z");

  /**
   * Constructs an instance from a class generated by the gversion Gradle plugin.
   *
   * <p>Instructions for using the gversion Gradle plugin can be found
   * <a href="https://docs.wpilib.org/en/stable/docs/software/advanced-gradlerio/deploy-git-data.html">
   * in the WPILib documentation</a>.
   *
   * @param buildConstantsClass Specially built class that contains the robot code build-time
   *     constants.
   * @return an {@link Optional} containing a populated record if successful, or empty if extraction
   *     failed.
   */
  static Optional<BuildConstantsRecord> fromGeneratedClass(Class<?> buildConstantsClass) {
    try {
      ZonedDateTime gitDate = extractZonedDateTime(buildConstantsClass, "GIT_DATE");
      if (gitDate == null) {
        return Optional.empty();
      }
      ZonedDateTime buildDate = extractZonedDateTime(buildConstantsClass, "BUILD_DATE");
      if (buildDate == null) {
        return Optional.empty();
      }
      String mavenName = (String) buildConstantsClass.getDeclaredField("MAVEN_NAME").get(null);
      int gitRevision = (int) buildConstantsClass.getDeclaredField("GIT_REVISION").get(null);
      String gitSha = (String) buildConstantsClass.getDeclaredField("GIT_SHA").get(null);
      String gitBranch = (String) buildConstantsClass.getDeclaredField("GIT_BRANCH").get(null);
      long buildTimeMillis =
          (long) buildConstantsClass.getDeclaredField("BUILD_UNIX_TIME").get(null);
      int dirty = (int) buildConstantsClass.getDeclaredField("DIRTY").get(null);

      return Optional.of(
          new BuildConstantsRecord(
              mavenName,
              gitRevision,
              gitSha,
              gitBranch,
              gitDate,
              buildDate,
              buildTimeMillis,
              dirty));
    } catch (NoSuchFieldException | IllegalAccessException e) {
      String message =
          "Could not extract build constants from "
              + buildConstantsClass.getSimpleName()
              + ": "
              + e.getMessage();
      DriverStation.reportWarning(message, e.getStackTrace());
    }
    return Optional.empty();
  }

  /** @return the git submit time formatted as {@code yyyy-MM-dd HH:mm:ss z}. */
  String gitSubmitTimeString() {
    return DATE_FORMATTER.format(gitSubmitTime);
  }

  /** @return the build time formatted as {@code yyyy-MM-dd HH:mm:ss z}. */
  String buildTimeString() {
    return DATE_FORMATTER.format(buildTime);
  }

  private static ZonedDateTime extractZonedDateTime(Class<?> buildConstantsClass, String fieldName)
      throws NoSuchFieldException, IllegalAccessException {
    String value = (String) buildConstantsClass.getDeclaredField(fieldName).get(null);
    try {
      return ZonedDateTime.parse(value, DATE_FORMATTER);
    } catch (DateTimeParseException e) {
      String message =
          "Could not extract build constants from "
              + buildConstantsClass.getSimpleName()
              + " due to unparsable date-time value for "
              + fieldName
              + ": "
              + e.getMessage();
      DriverStation.reportWarning(message, e.getStackTrace());
      return null;
    }
  }
}
