package com.team2813.lib2813.util;

import edu.wpi.first.wpilibj.DriverStation;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.Optional;

record BuildConstantsRecord(
    String mavenName,
    int gitRevision,
    String gitSha,
    String gitBranch,
    ZonedDateTime gitSubmitTime,
    ZonedDateTime buildTime,
    long buildTimeMillis,
    int dirty)
    implements BuildConstants {
  private static final DateTimeFormatter DATE_FORMATTER =
      DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss z");

  /**
   * Constructs an instance from a class generated by the gversion Gradle plugin.
   *
   * <p>Instructions for using the gversion Gradle plugin can be found <a
   * href="https://docs.wpilib.org/en/stable/docs/software/advanced-gradlerio/deploy-git-data.html>here</a>.
   *
   * @param buildConstantsClass Specially built class that contains the robot code built-time
   *     constants.
   */
  static Optional<BuildConstantsRecord> fromGeneratedClass(Class<?> buildConstantsClass) {
    try {
      String mavenName = (String) buildConstantsClass.getDeclaredField("MAVEN_NAME").get(null);
      int gitRevision = (int) buildConstantsClass.getDeclaredField("GIT_REVISION").get(null);
      String gitSha = (String) buildConstantsClass.getDeclaredField("GIT_SHA").get(null);
      String gitDate = (String) buildConstantsClass.getDeclaredField("GIT_DATE").get(null);
      String gitBranch = (String) buildConstantsClass.getDeclaredField("GIT_BRANCH").get(null);
      String buildDate = (String) buildConstantsClass.getDeclaredField("BUILD_DATE").get(null);
      long buildTimeMillis =
          (long) buildConstantsClass.getDeclaredField("BUILD_UNIX_TIME").get(null);
      int dirty = (int) buildConstantsClass.getDeclaredField("DIRTY").get(null);

      return Optional.of(
          new BuildConstantsRecord(
              mavenName,
              gitRevision,
              gitSha,
              gitBranch,
              ZonedDateTime.parse(gitDate, DATE_FORMATTER),
              ZonedDateTime.parse(buildDate, DATE_FORMATTER),
              buildTimeMillis,
              dirty));
    } catch (NoSuchFieldException | IllegalAccessException | DateTimeParseException e) {
      String message =
          "Could not extract build constants from "
              + buildConstantsClass.getSimpleName()
              + ": "
              + e.getMessage();
      DriverStation.reportWarning(message, e.getStackTrace());
    }
    return Optional.empty();
  }

  String gitSubmitTimeString() {
    return DATE_FORMATTER.format(gitSubmitTime);
  }

  String buildTimeString() {
    return DATE_FORMATTER.format(buildTime);
  }
}
