/*
Copyright 2025 Prospect Robotics SWENext Club

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
package com.team2813.lib2813.util;

import edu.wpi.first.wpilibj.DriverStation;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.Optional;

record BuildConstantsRecord(
    String mavenName,
    int gitRevision,
    String gitSha,
    String gitBranch,
    ZonedDateTime gitSubmitTime,
    ZonedDateTime buildTime,
    long buildTimeMillis,
    int dirty)
    implements BuildConstants {
  private static final DateTimeFormatter DATE_FORMATTER =
      DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss z");

  /**
   * Constructs an instance from a class generated by the gversion Gradle plugin.
   *
   * <p>Instructions for using the gversion Gradle plugin can be found <a
   * href="https://docs.wpilib.org/en/stable/docs/software/advanced-gradlerio/deploy-git-data.html>here</a>.
   *
   * @param buildConstantsClass Specially built class that contains the robot code built-time
   *     constants.
   */
  static Optional<BuildConstantsRecord> fromGeneratedClass(Class<?> buildConstantsClass) {
    try {
      ZonedDateTime gitDate = extractZonedDateTime(buildConstantsClass, "GIT_DATE");
      if (gitDate == null) {
        return Optional.empty();
      }
      ZonedDateTime buildDate = extractZonedDateTime(buildConstantsClass, "BUILD_DATE");
      if (buildDate == null) {
        return Optional.empty();
      }
      String mavenName = (String) buildConstantsClass.getDeclaredField("MAVEN_NAME").get(null);
      int gitRevision = (int) buildConstantsClass.getDeclaredField("GIT_REVISION").get(null);
      String gitSha = (String) buildConstantsClass.getDeclaredField("GIT_SHA").get(null);
      String gitBranch = (String) buildConstantsClass.getDeclaredField("GIT_BRANCH").get(null);
      long buildTimeMillis =
          (long) buildConstantsClass.getDeclaredField("BUILD_UNIX_TIME").get(null);
      int dirty = (int) buildConstantsClass.getDeclaredField("DIRTY").get(null);

      return Optional.of(
          new BuildConstantsRecord(
              mavenName,
              gitRevision,
              gitSha,
              gitBranch,
              gitDate,
              buildDate,
              buildTimeMillis,
              dirty));
    } catch (NoSuchFieldException | IllegalAccessException e) {
      String message =
          "Could not extract build constants from "
              + buildConstantsClass.getSimpleName()
              + ": "
              + e.getMessage();
      DriverStation.reportWarning(message, e.getStackTrace());
    }
    return Optional.empty();
  }

  String gitSubmitTimeString() {
    return DATE_FORMATTER.format(gitSubmitTime);
  }

  String buildTimeString() {
    return DATE_FORMATTER.format(buildTime);
  }

  private static ZonedDateTime extractZonedDateTime(Class<?> buildConstantsClass, String fieldName)
      throws NoSuchFieldException, IllegalAccessException {
    String value = (String) buildConstantsClass.getDeclaredField(fieldName).get(null);
    try {
      return ZonedDateTime.parse(value, DATE_FORMATTER);
    } catch (DateTimeParseException e) {
      String message =
          "Could not extract build constants from "
              + buildConstantsClass.getSimpleName()
              + " due to unparsable date-time value for "
              + fieldName
              + ": "
              + e.getMessage();
      DriverStation.reportWarning(message, e.getStackTrace());
      return null;
    }
  }
}
